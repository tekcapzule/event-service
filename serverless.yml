service: event-service
variablesResolutionMode: 20210326
package:
  version: '0.0.1-SNAPSHOT'
  artifact: ./application/target/${self:service}-${self:package.version}-${self:provider.name}.jar
  excludeDevDependencies: true
provider:
  name: aws
  runtime: java11
  region: us-east-1
  memorySize: 1024
  timeout: 30
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"
  environment:
    APPLICATION_ENVIRONMENT: ${opt:stage}
    CLOUD_REGION: US_East_1
functions:
  creatEvent:
    handler: org.springframework.cloud.function.adapter.aws.SpringBootApiGatewayRequestHandler
    events:
      - http:
          path: event/create
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-User-Login
              - X-Channel-Code
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema: ${file(api-gateway/create.json)}
                name: CreateEventModel
                description: 'create event model'
    environment:
      SPRING_CLOUD_FUNCTION_DEFINITION: createFunction
  updateEvent:
    handler: org.springframework.cloud.function.adapter.aws.SpringBootApiGatewayRequestHandler
    events:
      - http:
          path: event/update
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-User-Login
              - X-Channel-Code
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema: ${file(api-gateway/update.json)}
                name: UpdateEventModel
                description: 'update event model'
    environment:
      SPRING_CLOUD_FUNCTION_DEFINITION: updateFunction
  disableEvent:
    handler: org.springframework.cloud.function.adapter.aws.SpringBootApiGatewayRequestHandler
    events:
      - http:
          path: event/disable
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-User-Login
              - X-Channel-Code
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema: ${file(api-gateway/disable.json)}
                name: DisableEventModel
                description: 'disable event model'
    environment:
      SPRING_CLOUD_FUNCTION_DEFINITION: disableFunction
  getEvent:
    handler: org.springframework.cloud.function.adapter.aws.SpringBootApiGatewayRequestHandler
    events:
      - http:
          path: event/get
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-User-Login
              - X-Channel-Code
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema: ${file(api-gateway/get.json)}
                name: GetEventModel
                description: 'get event model'
    environment:
      SPRING_CLOUD_FUNCTION_DEFINITION: getFunction
  getAllEvent:
    handler: org.springframework.cloud.function.adapter.aws.SpringBootApiGatewayRequestHandler
    events:
      - http:
          path: event/getAll
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-User-Login
              - X-Channel-Code
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema: ${file(api-gateway/getAll.json)}
                name: GetAllEventsModel
                description: 'get all events model'
    environment:
      SPRING_CLOUD_FUNCTION_DEFINITION: getAllFunction
resources:
  extensions:
    CreatEventLambdaFunction:
      Properties:
        SnapStart:
          ApplyOn: PublishedVersions
    UpdateEventLambdaFunction:
      Properties:
        SnapStart:
          ApplyOn: PublishedVersions
    DisableEventLambdaFunction:
      Properties:
        SnapStart:
          ApplyOn: PublishedVersions
    GetEventLambdaFunction:
      Properties:
        SnapStart:
          ApplyOn: PublishedVersions
    GetAllEventLambdaFunction:
      Properties:
        SnapStart:
          ApplyOn: PublishedVersions
  Resources:
    eventTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}Event
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: S
          - AttributeName: eventDate
            AttributeType: S
        KeySchema:
          - AttributeName: code
            KeyType: HASH
          - AttributeName: eventDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1